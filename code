<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ATT&CK Technique Management</title>
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --accent-color: #e74c3c;
            --light-color: #ecf0f1;
            --dark-color: #2c3e50;
            --success-color: #2ecc71;
            --warning-color: #f39c12;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background-color: var(--primary-color);
            color: white;
            padding: 20px 0;
            text-align: center;
            margin-bottom: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            position: relative;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.8;
        }
        
        .auth-section {
            position: absolute;
            top: 20px;
            right: 20px;
        }
        
        .auth-btn {
            background-color: var(--secondary-color);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s ease;
        }
        
        .auth-btn:hover {
            background-color: #2980b9;
        }
        
        .admin-badge {
            display: inline-flex;
            align-items: center;
            background-color: var(--warning-color);
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-right: 10px;
        }
        
        .tabs {
            display: flex;
            margin-bottom: 20px;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .tab {
            padding: 15px 25px;
            cursor: pointer;
            flex: 1;
            text-align: center;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .tab.active {
            background-color: var(--secondary-color);
            color: white;
        }
        
        .tab:hover:not(.active) {
            background-color: #f1f1f1;
        }
        
        .content {
            display: none;
            background-color: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .content.active {
            display: block;
        }
        
        .technique-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .technique-card {
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
            position: relative;
        }
        
        .technique-card:hover {
            transform: translateY(-5px);
        }
        
        .card-header {
            background-color: var(--primary-color);
            color: white;
            padding: 15px;
        }
        
        .card-body {
            padding: 15px;
        }
        
        .card-section {
            margin-bottom: 15px;
        }
        
        .card-section h4 {
            color: var(--secondary-color);
            margin-bottom: 5px;
            border-bottom: 1px solid #eee;
            padding-bottom: 5px;
        }
        
        .delete-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: var(--accent-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .technique-card:hover .delete-btn {
            opacity: 1;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark-color);
        }
        
        input, textarea, select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        textarea {
            min-height: 120px;
            resize: vertical;
        }
        
        button {
            background-color: var(--secondary-color);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: background-color 0.3s ease;
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        .btn-success {
            background-color: var(--success-color);
        }
        
        .btn-success:hover {
            background-color: #27ae60;
        }
        
        .search-box {
            margin-bottom: 20px;
        }
        
        .no-data {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
            font-style: italic;
        }
        
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .modal h2 {
            margin-bottom: 20px;
            color: var(--primary-color);
        }
        
        .modal-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }
        
        .modal-btn {
            padding: 10px 15px;
        }
        
        .modal-btn.cancel {
            background-color: #95a5a6;
        }
        
        .modal-btn.cancel:hover {
            background-color: #7f8c8d;
        }
        
        .modal-btn.delete {
            background-color: var(--accent-color);
        }
        
        .modal-btn.delete:hover {
            background-color: #c0392b;
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #7f8c8d;
            font-size: 0.9rem;
        }
        
        @media (max-width: 768px) {
            .tabs {
                flex-direction: column;
            }
            
            .technique-grid {
                grid-template-columns: 1fr;
            }
            
            .auth-section {
                position: static;
                text-align: center;
                margin-top: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>ATT&CK Technique Management</h1>
            <p class="subtitle">Manage techniques, forensic evidence, controls, and audit questions</p>
            <div class="auth-section">
                <span id="admin-badge" class="admin-badge" style="display: none;">Admin Mode</span>
                <button id="auth-btn" class="auth-btn">Admin Login</button>
            </div>
        </header>
        
        <div class="tabs">
            <div class="tab active" data-tab="view">View Techniques</div>
            <div class="tab" data-tab="add">Add New Technique</div>
        </div>
        
        <div class="content active" id="view-content">
            <div class="search-box">
                <input type="text" id="search-input" placeholder="Search techniques...">
            </div>
            
            <div id="techniques-container" class="technique-grid">
                <!-- Techniques will be dynamically loaded here -->
            </div>
        </div>
        
        <div class="content" id="add-content">
            <h2>Add New ATT&CK Technique</h2>
            <form id="technique-form">
                <div class="form-group">
                    <label for="technique-name">Technique Name</label>
                    <input type="text" id="technique-name" required>
                </div>
                
                <div class="form-group">
                    <label for="technique-id">Technique ID</label>
                    <input type="text" id="technique-id" required>
                </div>
                
                <div class="form-group">
                    <label for="forensic-evidence">Forensic Evidence Required</label>
                    <textarea id="forensic-evidence" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="logging-control">Logging/Technical Control</label>
                    <textarea id="logging-control" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="audit-question">Audit Question</label>
                    <textarea id="audit-question" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="mitigation">Mitigation</label>
                    <textarea id="mitigation"></textarea>
                </div>
                
                <button type="submit" class="btn-success">Add Technique</button>
            </form>
        </div>
        
        <!-- Delete Confirmation Modal -->
        <div id="delete-modal" class="modal">
            <div class="modal-content">
                <h2>Confirm Deletion</h2>
                <p>Are you sure you want to delete this technique? This action cannot be undone.</p>
                <div class="modal-buttons">
                    <button id="cancel-delete" class="modal-btn cancel">Cancel</button>
                    <button id="confirm-delete" class="modal-btn delete">Delete</button>
                </div>
            </div>
        </div>
        
        <!-- Admin Login Modal -->
        <div id="login-modal" class="modal">
            <div class="modal-content">
                <h2>Admin Authentication</h2>
                <div class="form-group">
                    <label for="admin-password">Password</label>
                    <input type="password" id="admin-password" placeholder="Enter admin password">
                </div>
                <div class="modal-buttons">
                    <button id="cancel-login" class="modal-btn cancel">Cancel</button>
                    <button id="confirm-login" class="modal-btn btn-success">Login</button>
                </div>
            </div>
        </div>
        
        <footer>
            <p>ATT&CK Technique Management System &copy; 2023</p>
        </footer>
    </div>

    <script>
        // Sample data
        let techniques = [
            {
                id: "T1055",
                name: "Process Injection",
                forensicEvidence: "Memory dumps, process analysis, API monitoring logs",
                loggingControl: "Process monitoring, command-line logging, DLL monitoring",
                auditQuestion: "Are processes monitored for unusual injection patterns?",
                mitigation: "Application whitelisting, execution prevention"
            },
            {
                id: "T1070",
                name: "Indicator Removal on Host",
                forensicEvidence: "Event logs, file system artifacts, prefetch files",
                loggingControl: "Centralized logging, file integrity monitoring",
                auditQuestion: "Are logs regularly reviewed for deletion or clearing events?",
                mitigation: "Immutable logging, backup logs to secure location"
            },
            {
                id: "T1566",
                name: "Phishing",
                forensicEvidence: "Email headers, attachment analysis, URL analysis",
                loggingControl: "Email filtering, web proxy logs, endpoint detection",
                auditQuestion: "Are users trained to identify phishing attempts?",
                mitigation: "User awareness training, email filtering, multi-factor authentication"
            }
        ];

        // Admin password (in a real application, this would be handled server-side)
        const ADMIN_PASSWORD = "admin123";
        
        // Current state
        let isAdmin = false;
        let techniqueToDelete = null;

        // DOM Elements
        const tabs = document.querySelectorAll('.tab');
        const contents = document.querySelectorAll('.content');
        const techniquesContainer = document.getElementById('techniques-container');
        const searchInput = document.getElementById('search-input');
        const techniqueForm = document.getElementById('technique-form');
        const authBtn = document.getElementById('auth-btn');
        const adminBadge = document.getElementById('admin-badge');
        const deleteModal = document.getElementById('delete-modal');
        const loginModal = document.getElementById('login-modal');
        const cancelDeleteBtn = document.getElementById('cancel-delete');
        const confirmDeleteBtn = document.getElementById('confirm-delete');
        const cancelLoginBtn = document.getElementById('cancel-login');
        const confirmLoginBtn = document.getElementById('confirm-login');
        const adminPasswordInput = document.getElementById('admin-password');

        // Load techniques from localStorage if available
        function loadTechniques() {
            const storedTechniques = localStorage.getItem('attack-techniques');
            if (storedTechniques) {
                techniques = JSON.parse(storedTechniques);
            }
            renderTechniques();
        }

        // Save techniques to localStorage
        function saveTechniques() {
            localStorage.setItem('attack-techniques', JSON.stringify(techniques));
        }

        // Render techniques to the page
        function renderTechniques(filteredTechniques = null) {
            const techniquesToRender = filteredTechniques || techniques;
            
            if (techniquesToRender.length === 0) {
                techniquesContainer.innerHTML = '<div class="no-data">No techniques found. Add some using the "Add New Technique" tab.</div>';
                return;
            }
            
            techniquesContainer.innerHTML = '';
            
            techniquesToRender.forEach(technique => {
                const card = document.createElement('div');
                card.className = 'technique-card';
                
                card.innerHTML = `
                    <div class="card-header">
                        <h3>${technique.name}</h3>
                        <p>ID: ${technique.id}</p>
                    </div>
                    <div class="card-body">
                        <div class="card-section">
                            <h4>Forensic Evidence Required</h4>
                            <p>${technique.forensicEvidence}</p>
                        </div>
                        <div class="card-section">
                            <h4>Logging/Technical Control</h4>
                            <p>${technique.loggingControl}</p>
                        </div>
                        <div class="card-section">
                            <h4>Audit Question</h4>
                            <p>${technique.auditQuestion}</p>
                        </div>
                        <div class="card-section">
                            <h4>Mitigation</h4>
                            <p>${technique.mitigation || 'Not specified'}</p>
                        </div>
                    </div>
                `;
                
                // Add delete button if admin
                if (isAdmin) {
                    const deleteBtn = document.createElement('button');
                    deleteBtn.className = 'delete-btn';
                    deleteBtn.innerHTML = '×';
                    deleteBtn.title = 'Delete Technique';
                    deleteBtn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        showDeleteModal(technique.id);
                    });
                    card.appendChild(deleteBtn);
                }
                
                techniquesContainer.appendChild(card);
            });
        }

        // Show delete confirmation modal
        function showDeleteModal(techniqueId) {
            techniqueToDelete = techniqueId;
            deleteModal.style.display = 'flex';
        }

        // Hide delete confirmation modal
        function hideDeleteModal() {
            deleteModal.style.display = 'none';
            techniqueToDelete = null;
        }

        // Delete a technique
        function deleteTechnique() {
            if (!techniqueToDelete) return;
            
            techniques = techniques.filter(technique => technique.id !== techniqueToDelete);
            saveTechniques();
            renderTechniques();
            hideDeleteModal();
        }

        // Show login modal
        function showLoginModal() {
            loginModal.style.display = 'flex';
            adminPasswordInput.value = '';
        }

        // Hide login modal
        function hideLoginModal() {
            loginModal.style.display = 'none';
            adminPasswordInput.value = '';
        }

        // Authenticate admin
        function authenticateAdmin() {
            const password = adminPasswordInput.value;
            if (password === ADMIN_PASSWORD) {
                isAdmin = true;
                adminBadge.style.display = 'inline-flex';
                authBtn.textContent = 'Logout';
                hideLoginModal();
                renderTechniques(); // Re-render to show delete buttons
                updateTabVisibility();
            } else {
                alert('Incorrect password. Please try again.');
                adminPasswordInput.value = '';
                adminPasswordInput.focus();
            }
        }

        // Logout admin
        function logoutAdmin() {
            isAdmin = false;
            adminBadge.style.display = 'none';
            authBtn.textContent = 'Admin Login';
            renderTechniques(); // Re-render to hide delete buttons
            updateTabVisibility();
        }

        // Update tab visibility based on admin status
        function updateTabVisibility() {
            const addTab = document.querySelector('.tab[data-tab="add"]');
            if (isAdmin) {
                addTab.style.display = 'block';
            } else {
                addTab.style.display = 'none';
                
                // If we're on the add tab and not admin, switch to view tab
                const activeTab = document.querySelector('.tab.active');
                if (activeTab.getAttribute('data-tab') === 'add') {
                    tabs.forEach(t => t.classList.remove('active'));
                    document.querySelector('.tab[data-tab="view"]').classList.add('active');
                    
                    contents.forEach(content => content.classList.remove('active'));
                    document.getElementById('view-content').classList.add('active');
                }
            }
        }

        // Tab switching functionality
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabId = tab.getAttribute('data-tab');
                
                // Update active tab
                tabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Update active content
                contents.forEach(content => content.classList.remove('active'));
                document.getElementById(`${tabId}-content`).classList.add('active');
            });
        });

        // Search functionality
        searchInput.addEventListener('input', () => {
            const searchTerm = searchInput.value.toLowerCase();
            
            if (searchTerm === '') {
                renderTechniques();
                return;
            }
            
            const filteredTechniques = techniques.filter(technique => 
                technique.name.toLowerCase().includes(searchTerm) ||
                technique.id.toLowerCase().includes(searchTerm) ||
                technique.forensicEvidence.toLowerCase().includes(searchTerm) ||
                technique.loggingControl.toLowerCase().includes(searchTerm) ||
                technique.auditQuestion.toLowerCase().includes(searchTerm)
            );
            
            renderTechniques(filteredTechniques);
        });

        // Form submission for adding new technique
        techniqueForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            if (!isAdmin) {
                alert('You must be logged in as admin to add techniques.');
                return;
            }
            
            const newTechnique = {
                id: document.getElementById('technique-id').value,
                name: document.getElementById('technique-name').value,
                forensicEvidence: document.getElementById('forensic-evidence').value,
                loggingControl: document.getElementById('logging-control').value,
                auditQuestion: document.getElementById('audit-question').value,
                mitigation: document.getElementById('mitigation').value
            };
            
            // Check if technique ID already exists
            if (techniques.some(technique => technique.id === newTechnique.id)) {
                alert('A technique with this ID already exists. Please use a different ID.');
                return;
            }
            
            techniques.push(newTechnique);
            saveTechniques();
            renderTechniques();
            
            // Reset form
            techniqueForm.reset();
            
            // Switch to view tab
            tabs.forEach(t => t.classList.remove('active'));
            document.querySelector('.tab[data-tab="view"]').classList.add('active');
            
            contents.forEach(content => content.classList.remove('active'));
            document.getElementById('view-content').classList.add('active');
            
            // Show success message
            alert('Technique added successfully!');
        });

        // Authentication button click
        authBtn.addEventListener('click', () => {
            if (isAdmin) {
                logoutAdmin();
            } else {
                showLoginModal();
            }
        });

        // Delete modal events
        cancelDeleteBtn.addEventListener('click', hideDeleteModal);
        confirmDeleteBtn.addEventListener('click', deleteTechnique);

        // Login modal events
        cancelLoginBtn.addEventListener('click', hideLoginModal);
        confirmLoginBtn.addEventListener('click', authenticateAdmin);

        // Allow Enter key in login modal
        adminPasswordInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                authenticateAdmin();
            }
        });

        // Close modals when clicking outside
        window.addEventListener('click', (e) => {
            if (e.target === deleteModal) {
                hideDeleteModal();
            }
            if (e.target === loginModal) {
                hideLoginModal();
            }
        });

        // Initialize the application
        document.addEventListener('DOMContentLoaded', () => {
            loadTechniques();
            updateTabVisibility();
            
            // Check if already logged in (from sessionStorage)
            const savedAdminState = sessionStorage.getItem('isAdmin');
            if (savedAdminState === 'true') {
                isAdmin = true;
                adminBadge.style.display = 'inline-flex';
                authBtn.textContent = 'Logout';
                renderTechniques();
                updateTabVisibility();
            }
        });

        // Save admin state to sessionStorage when logging in/out
        function setAdminState(state) {
            isAdmin = state;
            sessionStorage.setItem('isAdmin', state);
            adminBadge.style.display = state ? 'inline-flex' : 'none';
            authBtn.textContent = state ? 'Logout' : 'Admin Login';
            renderTechniques();
            updateTabVisibility();
        }

        // Update the authenticateAdmin and logoutAdmin functions
        const originalAuthenticateAdmin = authenticateAdmin;
        authenticateAdmin = function() {
            originalAuthenticateAdmin();
            if (isAdmin) {
                sessionStorage.setItem('isAdmin', 'true');
            }
        };

        const originalLogoutAdmin = logoutAdmin;
        logoutAdmin = function() {
            originalLogoutAdmin();
            sessionStorage.setItem('isAdmin', 'false');
        };
    </script>
</body>
</html>
